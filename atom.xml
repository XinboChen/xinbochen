<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Xinbo's Home]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-13T03:20:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Xinbo Chen]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Harmonic Analyzer]]></title>
    <link href="http://yoursite.com/2016/01/12/Harmonic-Analyzer/"/>
    <id>http://yoursite.com/2016/01/12/Harmonic-Analyzer/</id>
    <published>2016-01-13T03:14:09.000Z</published>
    <updated>2016-01-13T03:20:21.000Z</updated>
    <content type="html"><![CDATA[<p>Before introduce our implementation about this analyzer, we are excited to show some pictures of our work.</p>
<h3 id="Our_Machine">Our Machine</h3><h3 id="Our_Result">Our Result</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>Before introduce our implementation about this analyzer, we are excited to show some pictures of our work.</p>
<h3 id="Our_Machine">Our M]]>
    </summary>
    
      <category term="Project" scheme="http://yoursite.com/tags/Project/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[singleton Pattern Learning]]></title>
    <link href="http://yoursite.com/2015/11/04/singleton-pattern/"/>
    <id>http://yoursite.com/2015/11/04/singleton-pattern/</id>
    <published>2015-11-04T19:17:22.000Z</published>
    <updated>2015-11-04T20:28:02.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/114632394553185794l.jpg" alt=""></p>
<p>Singleton pattern is the high frequent used pattern. Altough its simple, but there are still many aspect we need to focus on. The post lists several representation of singleton and analyze their advantages and disadvantages.<br><a id="more"></a></p>
<h2 id="Lazy_and_Eager_Initilization">Lazy and Eager Initilization</h2><p>The difference of lazy and eager version singleton is whether create a new instance because of demand. </p>
<h4 id="Lazy_one">Lazy one</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">			instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Eager_one">Eager one</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If the program will always need an instance, or it the cost of creating the instance is not too large in term of time/ resource, eager initilization is a better choice.</p>
<h3 id="Summary">Summary</h3><p>The above code have some problems, if multiple threads call getInstance() at the same time, that will create multiple instance. So it means such style can only work under single thread / process environment.</p>
<h2 id="Double_checked_locking_pattern">Double checked locking pattern</h2><p>This method is a way to implement lock in Java, the double means there are two times of <code>instance == null</code> checking. The first time is outside of synchronization block, the second one is inside. The reason to check two times is because there might have several threads got into <code>if</code> block at the same time. if we don’t double check inside if block, instances over 1 might be created.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">		synchroized (Singleton.class) &#123;</span><br><span class="line">			<span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">				instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Seems the above code is perfect. But, it still has some problems. Because <code>instance = new Singleton();</code> is not a atomic operation. When JVM execute this code, it did three things.</p>
<p>1: allocate memeory to instance.<br>2: call Singleton’s constructor to initialize its member variables.<br>3: point this instance to allocated memeory location. </p>
<p>After the step 3, the instance is non null. But JIT in JVM exist code optimization. So that means step 2 and 3’s order in unguranteed. The final execution sequence might be 1-2-3 or 1-3-2; If is later, when thread 1 execute step 3, before step 2. thread 2 come in and check instance already created, just return this instance. But at this time the instance is non null but also no intialized. So the instance used by thread 2 will return exception.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/114632394553185794l.jpg" alt=""></p>
<p>Singleton pattern is the high frequent used pattern. Altough its simple, but there are still many aspect we need to focus on. The post lists several representation of singleton and analyze their advantages and disadvantages.<br>]]>
    
    </summary>
    
      <category term="design pattern" scheme="http://yoursite.com/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Collection(1)]]></title>
    <link href="http://yoursite.com/2015/11/01/container/"/>
    <id>http://yoursite.com/2015/11/01/container/</id>
    <published>2015-11-02T04:47:59.000Z</published>
    <updated>2015-11-04T19:18:42.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/full_container_taxonomy.png" width="80%" height="40%"><br><a id="more"></a><br> This picture represents all elements’ relationship in Java’s container. Before going deep, first there are some basis of UML need to review.<br> (1): Solid-line square =&gt; class<br> (2): break-line square =&gt; interface<br> (3): empty Arrow with solid line =&gt; Generalization OR extends OR inheritance<br> (4): empty Arrow with break line =&gt; Realization OR implements </p>
<h2 id="1-_Collection_Interface">1. Collection Interface</h2><p>Collection Interface doesn’t provide direct implementation. all the container classes JDK provides are implemented by colection interface’s son interface: list and set. Collection interface represents a rule in here. the elements it includes must follow one or more rules. For example, some classes allow repeat, some not; some must insert by order, some are random. Some support sorting, some not, etc.</p>
<p>The whole classes which implements <code>Collection</code> provides two standard constructor:<br>(1) without parameter. Used to create an empty collection<br>(2) with parameter. Used to create a new collection with the same value of passed-by collection. </p>
<h2 id="2-_List_Interface">2. List Interface</h2><p>As direct interface of <code>Collection</code>. <code>List</code> represents ordered collection, or maintain elements order by using special rule. The major classes implements it are: <code>ArrayList</code>, <code>LinkedList</code>,<code>Vector</code>,<code>Stack</code>.</p>
<h3 id="2-1_ArrayList">2.1 ArrayList</h3><p>ArrayList<code>is a dynamic array. It can store any elements even include</code>null`. An ArrayList has an initial volume to contain 10 elements. Everytime when add new elements into arraylist, it will check volume and increase volume before overflow automatically. ArrayList is good at random access, also it is asynchronous.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/full_container_taxonomy.png" width = "80%" height ="40%"><br>]]>
    
    </summary>
    
      <category term="java Learning" scheme="http://yoursite.com/tags/java-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Iterator Interface Learning Note(1)]]></title>
    <link href="http://yoursite.com/2015/10/29/Iterator_class_research_in_Java/"/>
    <id>http://yoursite.com/2015/10/29/Iterator_class_research_in_Java/</id>
    <published>2015-10-29T06:21:53.000Z</published>
    <updated>2015-11-02T02:38:22.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/111788498731e41f26l.jpg" alt=""></p>
<h1 id="Introduction">Introduction</h1><p>Every software engineer are familiar iteration concept. The following code are simple iteration.</p>
<p>To go through array, we deal like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; array.length; i++)&#123;</span><br><span class="line">	<span class="keyword">int</span> a = array[i];</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>To go through arraylist, we deal like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">	String str = list.get(i);</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>How about go through other list, map? Different containers has their special iteration method. Can we find a general way to handle all class under container? To solve this question, Iterator coming to us. Iterator is an interface which always using only one logic to go though a container. So the client code not need to maintain inner struture of container, which will be take care of by iterator. Here is the definition:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The fuction of three method are straight forward by reading their method name. Here is an example of how to use iterator.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">	list.add(<span class="string">"TEST1"</span>);</span><br><span class="line">	list.add(<span class="string">"TEST2"</span>);</span><br><span class="line">	list.add(<span class="string">"TEST3"</span>);</span><br><span class="line">	list.add(<span class="string">"TEST4"</span>);</span><br><span class="line">	list.add(<span class="string">"TEST6"</span>);</span><br><span class="line">	list.add(<span class="string">"TEST5"</span>);</span><br><span class="line">	Iterator&lt;String&gt; it = list.iterator(); </span><br><span class="line">	<span class="keyword">while</span>(it.hasNext())</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(it.next());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>From this code we can see, if use String[] to replace ArrayList, the iteration process (from line 8) is always the same. But when we look into the implementation of <code>list.iterator()</code>; We can find more details of how iterator works.</p>
<p>There is a private inner class inside of ArrayList, this inner class implement iterator interface.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> cursor != size();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          checkForComodification();</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">int</span> i = cursor;</span><br><span class="line">              E next = get(i);</span><br><span class="line">              lastRet = i;</span><br><span class="line">              cursor = i + <span class="number">1</span>;</span><br><span class="line">              <span class="keyword">return</span> next;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">              checkForComodification();</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">          checkForComodification();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">              <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                  cursor--;</span><br><span class="line">              lastRet = -<span class="number">1</span>;</span><br><span class="line">              expectedModCount = modCount;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>This inner class defines three varibale: <code>cursor</code>, <code>lastRet</code>, <code>expectedModCount</code>. <code>cursor</code> represents the next element’s index, <code>lastRet</code> represents the last element’s index position.<br>About <code>expectedModCount = modCount;</code> is related to FAST-FAIL mechanism in Java. This mechanism provides safty ensurance during iteration process. Based on source code of ArrayList definition, both add and delete operation will let modCount++, when compare with modCount and expectedModCount, we can quickly detect whether such as <code>list.add()</code> operation during iteration process. if exsisted, exception will throwed!<br>Let’s write an example to verify this.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(it.hasNext())  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(it.next());  </span><br><span class="line">            list.add(<span class="string">"test"</span>);  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>The compiler will jump <font color="#FF0000">java.util.ConcurrentModificationException</font>. As we know ArrayList is multi-thread unsafety. when ArrayList created iterator, except modify this list by iterator itself, other modification in other threads will result in such excception, fastly failed.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/111788498731e41f26l.jpg" alt=""></p>
<h1 id="Introduction">Introduction</h1><p>Every software engineer are familiar iteration concept. The following code are simple iteration.</p>
<p>To go through array, we deal like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; array.length; i++)&#123;</span><br><span class="line">	<span class="keyword">int</span> a = array[i];</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Java Learning" scheme="http://yoursite.com/tags/Java-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Move Zeroes]]></title>
    <link href="http://yoursite.com/2015/10/13/Move_Zeros/"/>
    <id>http://yoursite.com/2015/10/13/Move_Zeros/</id>
    <published>2015-10-13T18:21:22.000Z</published>
    <updated>2015-11-02T02:40:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/11463269884776166bl.jpg" alt=""></p>
<h2 id="Question">Question</h2><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0]. </p>
<a id="more"></a>
<h3 id="Note">Note</h3><pre><code><span class="number">1.</span>You must <span class="built_in">do</span> this <span class="operator">in</span>-place <span class="keyword">without</span> making <span class="operator">a</span> copy <span class="operator">of</span> <span class="operator">the</span> array.

<span class="number">2.</span>Minimize <span class="operator">the</span> total <span class="built_in">number</span> <span class="operator">of</span> operations.
</code></pre><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]!=<span class="number">0</span> )&#123;</span><br><span class="line">                swap(++i, j, nums);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/11463269884776166bl.jpg" alt=""></p>
<h2 id="Question">Question</h2><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0]. </p>]]>
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/10/11/Hello-World/"/>
    <id>http://yoursite.com/2015/10/11/Hello-World/</id>
    <published>2015-10-11T13:21:22.000Z</published>
    <updated>2015-10-13T18:54:33.000Z</updated>
    <content type="html"><![CDATA[<p> <img src="/img/hello-world.png" alt="Hello World"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p> <img src="/img/hello-world.png" alt="Hello World"></p>
]]>
    </summary>
    
      <category term="personal" scheme="http://yoursite.com/tags/personal/"/>
    
  </entry>
  
</feed>
